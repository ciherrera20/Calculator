#------------------------ Basic definitions ------------------------#
# The stuff in here gets parsed by a lexer into tokens. 
# I had implemented it fully with the recursive descent parser, 
# but I kept running into the maximum recursion limit.

# Define a number
digit = [0-9]
digits = digit | digit digits
number = '.' digits | digits '.' | digits '.' digits | digits | word_break 'NaN' word_break | word_break 'Inf' word_break

# Define a word as a sequence of alphanumeric characters not beginning with a digit
word_char = [a-zA-Z_] | digit
start_word_char = [a-zA-Z_]
word_chars = empty | word_char | word_char word_chars
word = start_word_boundary start_word_char word_chars word_break

# Word break and start word boundary are 0 length matches.
# word_break is equivalent to the regex '\b' while start_word_boundary
# allows a digit. This is to support implicit multiplication.
# I don't know how to represent either of these as a language rule,
# but in the implementation, the parser simply returned the
# current_label position instead of incrementing the position given to it,
# which would correspond to matching a terminal. I think this technically
# makes the grammar context-sensitive? However, since the lexer takes
# care of it, it doesn't make any practical difference to the rest of
# the grammar.

# Any character that returns true for python's isspace function
whitespace_token = \s
whitespace = empty | whitespace_token | whitespace_token whitespace

#------------------------ Name definitions -------------------------#
# Define name as a sequence of words with periods in between
name = word ('.' word)*

#---------------------- Operator definitions -----------------------#
# Words not surrounded by quotes that are not non-terminals are word tokens
unary_op = [+-!] | not

# The name gives each operator's precedence, with lower numbers being evaluated first
prec0_op = '^'
prec1_op = [*/%]
prec2_op = [+-]
prec3_op = '<' | '>' | '<=' | '>='
prec4_op = '==' | '!=' | neq | eq
prec5_op = and
prec6_op = or

#------------------- Binary operand definition ---------------------#
# Unary operand is defined further down
binary_operand = (unary_op)* unary_operand

#--------------------- Expression definitions ----------------------#
# This allows for the parser to automatically detect order of operations
prec0_exp = binary_operand (prec0_op, binary_operand)*
prec1_exp = prec0_exp (prec1_op, prec0_exp)*
prec2_exp = prec1_exp (prec2_op, prec1_exp)*
prec3_exp = prec2_exp (prec3_op, prec2_exp)*
prec4_exp = prec3_exp (prec4_op, prec3_exp)*
prec5_exp = prec4_exp (prec5_op, prec4_exp)*
prec6_exp = prec5_exp (prec6_op, prec5_exp)*

#--------------------- Expression definitions ----------------------#
expression = prec6_exp | '(' word_list ')' | empty

wrapped_expression = '(' expression ')'

expession_list = expression (',' expression)*

wrapped_expression_list = '(' expression_list ')'

array = '[' (expression_list | expression) ']'

#-------------------- Function call definitions --------------------#
callable = index | wrapped_expression | name
callee = '(' ')' | wrapped_expression | wrapped_expression_list
function_call = callable callee+

#----------------------- Index definitions -------------------------#
indexable = function_call | wrapped_expression | array | name
index = indexable array+

#----------------------- Operand definition ------------------------#
composable_unary_operand =  index |
                            function_call |
                            array |
                            name |
                            wrapped_expression |
                            number

implicit_mult = composable_unary_operand composable_unary_operand+

unary_operand = implicit_mult | composable_unary_operand

word_list = word (',' word)* | empty

#----------------------- Program definition ------------------------#
function_def = word '(' word_list ')' '=' expression

var_def = (word '=')+ expression

line = function_def | var_def | expression

program = line (';' line)*